import { App } from "vue";
declare const _default: {
    install: (app: App) => void;
    PanoViewer: import("vue").DefineComponent<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        image: {
            type: import("vue").PropType<string | HTMLElement>;
        };
        video: {
            type: import("vue").PropType<string | HTMLElement>;
        };
        projectionType: {
            type: import("vue").PropType<import("@egjs/view360/declaration/types/internal").ValueOf<{
                EQUIRECTANGULAR: "equirectangular";
                CUBEMAP: "cubemap";
                CUBESTRIP: "cubestrip";
                PANORAMA: "panorama";
                STEREOSCOPIC_EQUI: "stereoequi";
            }>>;
        };
        cubemapConfig: {
            type: import("vue").PropType<Partial<import("@egjs/view360/declaration/types/internal").CubemapConfig>>;
        };
        stereoFormat: {
            type: import("vue").PropType<import("@egjs/view360/declaration/types/internal").ValueOf<{
                TOP_BOTTOM: "3dv";
                LEFT_RIGHT: "3dh";
                NONE: "";
            }>>;
        };
        width: {
            type: import("vue").PropType<number>;
        };
        height: {
            type: import("vue").PropType<number>;
        };
        yaw: {
            type: import("vue").PropType<number>;
        };
        pitch: {
            type: import("vue").PropType<number>;
        };
        fov: {
            type: import("vue").PropType<number>;
        };
        showPolePoint: {
            type: import("vue").PropType<boolean>;
        };
        useZoom: {
            type: import("vue").PropType<boolean>;
        };
        useKeyboard: {
            type: import("vue").PropType<boolean>;
        };
        gyroMode: {
            type: import("vue").PropType<import("@egjs/view360/declaration/types/internal").ValueOf<{
                NONE: "none";
                YAWPITCH: "yawPitch";
                VR: "VR";
            }>>;
        };
        yawRange: {
            type: import("vue").PropType<number[]>;
        };
        pitchRange: {
            type: import("vue").PropType<number[]>;
        };
        fovRange: {
            type: import("vue").PropType<number[]>;
        };
        touchDirection: {
            type: import("vue").PropType<number>;
        };
        canvasClass: {
            type: import("vue").PropType<string>;
        };
    }, unknown, {
        canvasKey: number;
        prevProps: import("./types").PanoViewerProps;
        vanillaPanoViewer: import("@egjs/view360/declaration/PanoViewer/PanoViewer").default;
        updateEmitter: import("@egjs/component/declaration/Component").default<{
            updated: void;
        }>;
    }, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        tag?: unknown;
        image?: unknown;
        video?: unknown;
        projectionType?: unknown;
        cubemapConfig?: unknown;
        stereoFormat?: unknown;
        width?: unknown;
        height?: unknown;
        yaw?: unknown;
        pitch?: unknown;
        fov?: unknown;
        showPolePoint?: unknown;
        useZoom?: unknown;
        useKeyboard?: unknown;
        gyroMode?: unknown;
        yawRange?: unknown;
        pitchRange?: unknown;
        fovRange?: unknown;
        touchDirection?: unknown;
        canvasClass?: unknown;
    } & {
        tag: string;
    } & {
        image?: string | HTMLElement;
        video?: string | HTMLElement;
        projectionType?: import("@egjs/view360/declaration/types/internal").ValueOf<{
            EQUIRECTANGULAR: "equirectangular";
            CUBEMAP: "cubemap";
            CUBESTRIP: "cubestrip";
            PANORAMA: "panorama";
            STEREOSCOPIC_EQUI: "stereoequi";
        }>;
        cubemapConfig?: unknown;
        stereoFormat?: import("@egjs/view360/declaration/types/internal").ValueOf<{
            TOP_BOTTOM: "3dv";
            LEFT_RIGHT: "3dh";
            NONE: "";
        }>;
        width?: number;
        height?: number;
        yaw?: number;
        pitch?: number;
        fov?: number;
        showPolePoint?: boolean;
        useZoom?: boolean;
        useKeyboard?: boolean;
        gyroMode?: import("@egjs/view360/declaration/types/internal").ValueOf<{
            NONE: "none";
            YAWPITCH: "yawPitch";
            VR: "VR";
        }>;
        yawRange?: number[];
        pitchRange?: number[];
        fovRange?: number[];
        touchDirection?: number;
        canvasClass?: string;
    }>, {
        tag: string;
    }>;
    SpinViewer: import("vue").DefineComponent<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        imageUrl: {
            type: import("vue").PropType<string>;
        };
        rowCount: {
            type: import("vue").PropType<number>;
        };
        colCount: {
            type: import("vue").PropType<number>;
        };
        width: {
            type: import("vue").PropType<string | number>;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        autoHeight: {
            type: import("vue").PropType<boolean>;
        };
        colRow: {
            type: import("vue").PropType<number[]>;
        };
        scale: {
            type: import("vue").PropType<number>;
        };
        frameIndex: {
            type: import("vue").PropType<number>;
        };
        wrapperClass: {
            type: import("vue").PropType<string>;
        };
        imageClass: {
            type: import("vue").PropType<string>;
        };
    }, unknown, {
        vanillaSpinViewer: import("@egjs/view360/declaration/SpinViewer/SpinViewer").default;
    }, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        tag?: unknown;
        imageUrl?: unknown;
        rowCount?: unknown;
        colCount?: unknown;
        width?: unknown;
        height?: unknown;
        autoHeight?: unknown;
        colRow?: unknown;
        scale?: unknown;
        frameIndex?: unknown;
        wrapperClass?: unknown;
        imageClass?: unknown;
    } & {
        tag: string;
    } & {
        width?: string | number;
        height?: string | number;
        imageUrl?: string;
        rowCount?: number;
        colCount?: number;
        autoHeight?: boolean;
        colRow?: number[];
        scale?: number;
        frameIndex?: number;
        wrapperClass?: string;
        imageClass?: string;
    }>, {
        tag: string;
    }>;
};
export default _default;
