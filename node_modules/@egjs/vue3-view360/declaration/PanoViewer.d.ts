import { PropType } from "vue";
import { PanoViewer as VanillaPanoViewer } from "@egjs/view360";
import Component from "@egjs/component";
import { PanoViewerProps } from "./types";
declare const PanoViewer: import("vue").DefineComponent<{
    tag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    image: {
        type: PropType<string | HTMLElement>;
    };
    video: {
        type: PropType<string | HTMLElement>;
    };
    projectionType: {
        type: PropType<import("@egjs/view360/declaration/types/internal").ValueOf<{
            EQUIRECTANGULAR: "equirectangular";
            CUBEMAP: "cubemap";
            CUBESTRIP: "cubestrip";
            PANORAMA: "panorama";
            STEREOSCOPIC_EQUI: "stereoequi";
        }>>;
    };
    cubemapConfig: {
        type: PropType<Partial<import("@egjs/view360/declaration/types/internal").CubemapConfig>>;
    };
    stereoFormat: {
        type: PropType<import("@egjs/view360/declaration/types/internal").ValueOf<{
            TOP_BOTTOM: "3dv";
            LEFT_RIGHT: "3dh";
            NONE: "";
        }>>;
    };
    width: {
        type: PropType<number>;
    };
    height: {
        type: PropType<number>;
    };
    yaw: {
        type: PropType<number>;
    };
    pitch: {
        type: PropType<number>;
    };
    fov: {
        type: PropType<number>;
    };
    showPolePoint: {
        type: PropType<boolean>;
    };
    useZoom: {
        type: PropType<boolean>;
    };
    useKeyboard: {
        type: PropType<boolean>;
    };
    gyroMode: {
        type: PropType<import("@egjs/view360/declaration/types/internal").ValueOf<{
            NONE: "none";
            YAWPITCH: "yawPitch";
            VR: "VR";
        }>>;
    };
    yawRange: {
        type: PropType<number[]>;
    };
    pitchRange: {
        type: PropType<number[]>;
    };
    fovRange: {
        type: PropType<number[]>;
    };
    touchDirection: {
        type: PropType<number>;
    };
    canvasClass: {
        type: PropType<string>;
    };
}, unknown, {
    canvasKey: number;
    prevProps: PanoViewerProps;
    vanillaPanoViewer: VanillaPanoViewer;
    updateEmitter: Component<{
        updated: void;
    }>;
}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    tag?: unknown;
    image?: unknown;
    video?: unknown;
    projectionType?: unknown;
    cubemapConfig?: unknown;
    stereoFormat?: unknown;
    width?: unknown;
    height?: unknown;
    yaw?: unknown;
    pitch?: unknown;
    fov?: unknown;
    showPolePoint?: unknown;
    useZoom?: unknown;
    useKeyboard?: unknown;
    gyroMode?: unknown;
    yawRange?: unknown;
    pitchRange?: unknown;
    fovRange?: unknown;
    touchDirection?: unknown;
    canvasClass?: unknown;
} & {
    tag: string;
} & {
    image?: string | HTMLElement;
    video?: string | HTMLElement;
    projectionType?: import("@egjs/view360/declaration/types/internal").ValueOf<{
        EQUIRECTANGULAR: "equirectangular";
        CUBEMAP: "cubemap";
        CUBESTRIP: "cubestrip";
        PANORAMA: "panorama";
        STEREOSCOPIC_EQUI: "stereoequi";
    }>;
    cubemapConfig?: unknown;
    stereoFormat?: import("@egjs/view360/declaration/types/internal").ValueOf<{
        TOP_BOTTOM: "3dv";
        LEFT_RIGHT: "3dh";
        NONE: "";
    }>;
    width?: number;
    height?: number;
    yaw?: number;
    pitch?: number;
    fov?: number;
    showPolePoint?: boolean;
    useZoom?: boolean;
    useKeyboard?: boolean;
    gyroMode?: import("@egjs/view360/declaration/types/internal").ValueOf<{
        NONE: "none";
        YAWPITCH: "yawPitch";
        VR: "VR";
    }>;
    yawRange?: number[];
    pitchRange?: number[];
    fovRange?: number[];
    touchDirection?: number;
    canvasClass?: string;
}>, {
    tag: string;
}>;
export default PanoViewer;
