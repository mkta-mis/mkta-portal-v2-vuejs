/*
Copyright (c) NAVER Corp.
name: @egjs/vue3-view360
license: MIT
author: NAVER Corp.
repository: https://github.com/naver/egjs-view360/tree/master/packages/vue3-view360
version: 3.0.4
*/
'use strict';

var vue = require('vue');
var view360 = require('@egjs/view360');
var Component = require('@egjs/component');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var panoOptions = Object.keys(view360.PANOVIEWER_OPTIONS).reduce(function (propObj, optionName) {
  propObj[optionName] = null;
  return propObj;
}, {}); // eslint-disable-next-line @typescript-eslint/naming-convention

var PanoViewer = vue.defineComponent({
  props: __assign(__assign({}, panoOptions), {
    tag: {
      type: String,
      required: false,
      default: "div"
    }
  }),
  data: function () {
    return {
      canvasKey: -1
    };
  },
  mounted: function () {
    var _this = this;

    var props = view360.getValidProps(this.$props);
    this.updateEmitter = new Component();
    this.vanillaPanoViewer = new view360.PanoViewer(this.$refs.container, props);
    view360.withPanoViewerMethods(this, "vanillaPanoViewer");
    this.prevProps = props;
    var panoViewer = this.vanillaPanoViewer;
    var events = Object.keys(view360.PANOVIEWER_EVENTS).map(function (key) {
      return view360.PANOVIEWER_EVENTS[key];
    });
    events.forEach(function (eventName) {
      panoViewer.on(eventName, function (e) {
        e.currentTarget = _this; // Make events from camelCase to kebab-case

        _this.$emit(eventName.replace(/([A-Z])/g, "-$1").toLowerCase(), e);
      });
    });
  },
  beforeDestroy: function () {
    var panoViewer = this.vanillaPanoViewer;
    panoViewer === null || panoViewer === void 0 ? void 0 : panoViewer.destroy();
  },
  updated: function () {
    this.updateEmitter.trigger("updated");
  },
  watch: {
    $props: {
      handler: function () {
        var panoViewer = this.vanillaPanoViewer;
        if (!panoViewer) return;
        var nextProps = view360.getValidProps(this.$props);
        var prevProps = this.prevProps;

        if (nextProps.image != null && nextProps.image !== prevProps.image || nextProps.video != null && nextProps.video !== prevProps.video) {
          this.canvasKey = view360.generateCanvasKey(this.canvasKey);
          this.$forceUpdate(); // Update after render

          this.updateEmitter.once("updated", function () {
            view360.updatePanoViewer(panoViewer, nextProps, prevProps);
          });
        } else {
          // Update immediately
          view360.updatePanoViewer(panoViewer, nextProps, prevProps);
        }

        this.prevProps = nextProps;
      },
      deep: true,
      immediate: true
    }
  },
  render: function () {
    var _a, _b, _c;

    var canvasClass = (_a = this.canvasClass) !== null && _a !== void 0 ? _a : view360.DEFAULT_CANVAS_CLASS;
    return vue.h(this.tag, {
      ref: "container"
    }, [vue.h("canvas", {
      class: canvasClass,
      key: this.canvasKey
    }), (_c = (_b = this.$slots).default) === null || _c === void 0 ? void 0 : _c.call(_b)]);
  }
});

var spinOptions = Object.keys(view360.SPINVIEWER_OPTIONS).reduce(function (propObj, optionName) {
  propObj[optionName] = null;
  return propObj;
}, {});
var SpinViewer = vue.defineComponent({
  props: __assign(__assign({}, spinOptions), {
    tag: {
      type: String,
      required: false,
      default: "div"
    }
  }),
  data: function () {
    return {};
  },
  mounted: function () {
    var _this = this;

    var props = view360.getValidProps(this.$props);
    this.vanillaSpinViewer = new view360.SpinViewer(this.$refs.container, props);
    view360.withSpinViewerMethods(this, "vanillaSpinViewer");
    var spinViewer = this.vanillaSpinViewer;
    var events = Object.keys(view360.SPINVIEWER_EVENTS).map(function (key) {
      return view360.SPINVIEWER_EVENTS[key];
    });
    events.forEach(function (eventName) {
      spinViewer.on(eventName, function (e) {
        e.currentTarget = _this; // Make events from camelCase to kebab-case

        _this.$emit(eventName.replace(/([A-Z])/g, "-$1").toLowerCase(), e);
      });
    });
  },
  watch: {
    scale: function (newVal) {
      var _a;

      (_a = this.vanillaSpinViewer) === null || _a === void 0 ? void 0 : _a.setScale(newVal);
    }
  },
  render: function () {
    var _a, _b, _c, _d;

    var wrapperClass = (_a = this.wrapperClass) !== null && _a !== void 0 ? _a : view360.DEFAULT_WRAPPER_CLASS;
    var imageClass = (_b = this.imageClass) !== null && _b !== void 0 ? _b : view360.DEFAULT_IMAGE_CLASS;
    return vue.h(this.tag, {
      ref: "container"
    }, [vue.h("div", {
      class: wrapperClass
    }, [vue.h("img", {
      class: imageClass
    })]), (_d = (_c = this.$slots).default) === null || _d === void 0 ? void 0 : _d.call(_c)]);
  }
});

var index_umd = {
  install: function (app) {
    app.component("PanoViewer", PanoViewer);
    app.component("SpinViewer", SpinViewer);
  },
  PanoViewer: PanoViewer,
  SpinViewer: SpinViewer
};

module.exports = index_umd;
//# sourceMappingURL=view360.cjs.js.map
